<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>JustinFX.com</title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://justinfx.com/tags/benchmark/</link>
    <language>en-us</language>
    <author>Justin Israel</author>
    <copyright>2015 Justin Israel</copyright>
    <updated>Sun, 07 Jun 2015 00:00:00 UTC</updated>
    
    
    <item>
      <title>Comparing performance of Qt smart pointer options</title>
      <link>http://justinfx.com/2015/06/07/comparing-performance-of-qt-smart-pointer-options/</link>
      <pubDate>Sun, 07 Jun 2015 00:00:00 UTC</pubDate>
      <author>Justin Israel</author>
      <guid>http://justinfx.com/2015/06/07/comparing-performance-of-qt-smart-pointer-options/</guid>
      <description>

&lt;p&gt;There are a number of sources of information on the usage and behavioral differences of the many &amp;#8220;smart pointer&amp;#8221; options offered by Qt. But one thing I couldn&amp;#8217;t find enough information on were the performance characteristics.&lt;/p&gt;

&lt;p&gt;&amp;#8220;&lt;a href=&#34;http://www.macieira.org/blog/2012/07/continue-using-qpointer/&#34;&gt;Continue Using QPointer&lt;/a&gt;&amp;#8221; describes the complicated situation that came about when the Qt project was choosing to either deprecate QPointer vs QWeakPointer APIs in Qt5, and ultimately how QPointer was preserved. It also describes how in Qt4, the QPointer has a large performance hit vs its improved backend in Qt5. So basically it says to choose performance vs compatibility.&lt;/p&gt;

&lt;p&gt;&amp;#8220;&lt;a href=&#34;http://stackoverflow.com/questions/5026197/what-c-smart-pointer-implementations-are-available/5026705#5026705&#34;&gt;What C++ Smart Pointer Implementations are available?&lt;/a&gt;&amp;#8220;, on StackOverflow, offers a pretty nice breakdown of not only the Qt smart pointers, but also other available options via Boost and C++11.&lt;/p&gt;

&lt;p&gt;I was in a situation where an existing code base had a number of basic classes that were stored in very large parent/child relationships, as pointers. Once I needed to start sharing pointers between some newer classes, I pretty quickly ran into issues of dangling pointers when relationships would change and objects would get deleted, and it seemed that a proper solution would be to introduce some sort of guarded/smart pointer in the mix. Each of a number of options have their own pros and cons. My first approach was just to use a QPointer at the point of creation, and only change the signature of functions that really needed to receive the QPointer. But I was concerned about performance, since more than one source referenced just how slow QPointer can be. But I didn&amp;#8217;t want to just switch to a QWeakPointer because of the deprecation in Qt5. So I ended up doing some benchmarks and figured this information might round out the rest of the available info on the web.&lt;/p&gt;

&lt;p&gt;The test for my benchmark involved creating a number objects, adding them to a list, and then deleting them. The options for the test include both pointers to a basic struct and a QObject, QPointers, QSharedPointers, QWeakPointers, and just for an external comparison I also included boost::shared_ptr and boost::weak_ptr. The test was performed with different numbers of objects, as well as for both Qt4 and Qt5. Here is a more detailed description of each test.&lt;/p&gt;

&lt;h4 id=&#34;the-test-environment:c89abc9fedab4936f89941691d570e98&#34;&gt;The Test Environment&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;OSX 10.9.5 Laptop  
2.8 Ghz Intel Core 2 Duo
8 GB 1067 Mhz DDR3 memory
Clang x86 64bit
Qt 4.8.6
Qt 5.4.2
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;description-of-tests:c89abc9fedab4936f89941691d570e98&#34;&gt;Description of Tests&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;test_raw_pointer&lt;/em&gt; : Creating pointers to a basic struct, adding the raw pointers to a QList, and then deleting all of the pointers&lt;/p&gt;

&lt;p&gt;&lt;em&gt;test_raw_qobject&lt;/em&gt; : Creating pointers to QObject instances, adding them to a QList, and then deleting all of the pointers&lt;/p&gt;

&lt;p&gt;&lt;em&gt;test_ptr_qsharedpointer&lt;/em&gt; : Creating QSharedPointers to a basic struct, and also a QWeakPointer for each, and adding the shared pointers to a QList. Then deleting them all.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;test_qobj_qsharedpointer&lt;/em&gt; : Creating QSharedPointers to a QObject, and also a QWeakPointer for each, and adding the shared pointers to a QList. Then deleting them all.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;test_qobj_qweakpointer&lt;/em&gt; : Creating QWeakPointers directly from QObject instances, adding them to a QList, and then deleting them all. This test could only be performed in Qt4, because Qt5 deprecated QObject tracking support for QWeakPointers, which can now only be used with QSharedPointer&lt;/p&gt;

&lt;p&gt;_test&lt;em&gt;qpointer&lt;/em&gt; : Creating QPointers directly from QObject instances, adding them to a QList, and then deleting them all.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;test_boost_sharedptr&lt;/em&gt; : Creating &lt;code&gt;boost::shared_ptrs&lt;/code&gt; from basic struct instances, as well as boost::weak_ptrs for each, adding the shared_ptrs to a QList, and then deleting them&lt;/p&gt;

&lt;p&gt;_test_boost_qobj&lt;em&gt;sharedptr&lt;/em&gt; : Creating &lt;code&gt;boost::shared_ptrs&lt;/code&gt; from QObject instances, as well as boost::weak_ptrs for each, adding the shared_ptrs to a QList, and then deleting them&lt;/p&gt;

&lt;h4 id=&#34;the-test-results:c89abc9fedab4936f89941691d570e98&#34;&gt;The Test Results&lt;/h4&gt;

&lt;pre class=&#34;&#34;&gt;Testing w/ 5000 objects        Qt4       Qt5
=============================================
test_raw_pointer:              1 ms      1 ms
test_raw_qobject:              4 ms      3 ms 
test_ptr_qsharedpointer:       3 ms      3 ms 
test_qobj_qsharedpointer:     13 ms      6 ms
test_qobj_qweakpointer:        6 ms      -
test_qpointer:                 8 ms      7 ms
test_boost_sharedptr:          5 ms      3 ms
test_boost_qobj_sharedptr:     6 ms      4 ms

Testing w/ 50000 objects
=============================================
test_raw_pointer:             12 ms     10 ms
test_raw_qobject:             41 ms     35 ms
test_ptr_qsharedpointer:      32 ms     35 ms
test_qobj_qsharedpointer:     66 ms     62 ms
test_qobj_qweakpointer:       76 ms     -
test_qpointer:               103 ms     65 ms
test_boost_sharedptr:         32 ms     31 ms 
test_boost_qobj_sharedptr:    69 ms     61 ms

Testing w/ 500000 objects
=============================================
test_raw_pointer:            109 ms    107 ms
test_raw_qobject:            379 ms    329 ms
test_ptr_qsharedpointer:     352 ms    354 ms
test_qobj_qsharedpointer:    709 ms    642 ms
test_qobj_qweakpointer:      811 ms    -
test_qpointer:              1109 ms    725 ms
test_boost_sharedptr:        350 ms    346 ms
test_boost_qobj_sharedptr:   680 ms    611 ms

Testing w/ 2000000 objects
=============================================
test_raw_pointer:            417 ms    401 ms
test_raw_qobject:           1502 ms   1201 ms
test_ptr_qsharedpointer:    1933 ms   1383 ms
test_qobj_qsharedpointer:   3207 ms   2604 ms
test_qobj_qweakpointer:     3387 ms   -
test_qpointer:              5599 ms   2832 ms
test_boost_sharedptr:       1370 ms   1350 ms 
test_boost_qobj_sharedptr:  2864 ms   2453 ms&lt;/pre&gt;

&lt;a href=&#34;http://justinfx.com/wp-content/uploads/2015/06/qt4_pointers.png&#34; title data-fluidbox class=&#34;fluidbox&#34;&gt;
	&lt;img src=&#34;http://justinfx.com/wp-content/uploads/2015/06/qt4_pointers-300x157.png&#34; title alt&gt;
&lt;/a&gt;


&lt;a href=&#34;http://justinfx.com/wp-content/uploads/2015/06/qt5_pointers.png&#34; title data-fluidbox class=&#34;fluidbox&#34;&gt;
	&lt;img src=&#34;http://justinfx.com/wp-content/uploads/2015/06/qt5_pointers-300x154.png&#34; title alt&gt;
&lt;/a&gt;


&lt;p&gt;The test shows the overhead of simply going from a simple struct to a QObject, and then the further impact of introducing various smart pointers on QObjects, and also on non-QObjects where permitted.&lt;/p&gt;

&lt;p&gt;QPointer was the easiest change to introduce, because after you make the original class into a QObject subclass, you only need to change the code at the call site(s) where the pointers are created, and then only within the functions that specifically need to receive a guarded QPointer. For all the other function signatures, QPointer will automatically cast to an unguarded T* and behave exactly the same as before. But you can see from the results that the performance impact can be over 10x slower than when we originally started with our non-QObject class. In Qt5, while it is still most poorly performing option, it is not too far off from the option of a QSharePointer + QWeakPointer.&lt;/p&gt;

&lt;p&gt;The best performing option seems to be keeping the class as a non-QObject and using either QSharedPointer+QWeakPointer, or boost shared_ptr+weak_ptr. Although, this is the most intrusive change since all signatures have to be updated to accept QSharedPointer (or typedef).&lt;/p&gt;

&lt;p&gt;In between, using a QWeakPointer with direct QObject tracking seems like a balance between the ease of slotting it in to the existing code, and performance. The classes would still need to be QObject subclasses, but only the specific functions that need a QWeakPointer would need to change. Unfortunately this is not supported anymore in Qt5 (as only the QSharedPointer support is allowed), so it becomes a choice of whether the code needs to stay clean for future compatibility, or if one just wants to make the change later when a Qt5 migration actually happens.&lt;/p&gt;

&lt;p&gt;For a small number of object creations/deletions, the performance difference doesn&amp;#8217;t seem like it would matter that much, but when it involves tons of objects it might be a problem. If your classes were already QObjects then there are less options to consider in the first place. And the more performant route, if you don&amp;#8217;t care about the amount of code that has to change, would probably be to shoot for QSharedPointer + QWeakPointer.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Python 2.7.2 serializer speed comparisons</title>
      <link>http://justinfx.com/2012/07/25/python-2-7-3-serializer-speed-comparisons/</link>
      <pubDate>Wed, 25 Jul 2012 00:00:00 UTC</pubDate>
      <author>Justin Israel</author>
      <guid>http://justinfx.com/2012/07/25/python-2-7-3-serializer-speed-comparisons/</guid>
      <description>&lt;p&gt;In a recent python project where I was sending multiple messages per second of data over a basic socket, I had initially just grabbed the cPickle module to get the prototype proof-of-concept functioning properly. cPickle is awesome for easily serializing more complex python objects like custom classes, even though in my case I am only sending basic types.&lt;/p&gt;

&lt;p&gt;My messages were dicts with some nested dicts, lists, floats, and string values. Roughly 500-1000 bytes. cPickle was doing just fine, but there came a point where I wanted to investigate the areas that could be tightened up. The first thing I realized was that I had forgotten to encode cPickle in the binary format (the default is ascii). That saved me quite a bit of time. But then I casually searched online to see if any json options might be better since my data is pretty primitive anyways.&lt;/p&gt;

&lt;p&gt;I found &lt;a href=&#34;http://pypi.python.org/pypi/ujson/&#34;&gt;UltraJSON&lt;/a&gt;, which is a pure C json parsing library for python, and ran some tests. There are benchmarks on the project page for ujson, as well as other articles on the internet, but I just wanted to post up my own results using a mixed type data container. ujson came out extremely fast: faster than binary cPickle and msgpack, in the encoding test. Although in the decoding test, msgpack appeared to be fastest, followed by binary cPickle, and then ujson coming in 3rd&lt;/p&gt;

&lt;p&gt;This test included the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.python.org/library/pickle.html#module-pickle&#34;&gt;pickle/cPickle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.python.org/library/json.html&#34;&gt;json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pypi.python.org/pypi/simplejson/&#34;&gt;simplejson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pypi.python.org/pypi/python-cjson/&#34;&gt;cjson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/ujson&#34;&gt;ujson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pypi.python.org/pypi/yajl/&#34;&gt;yajl-py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pypi.python.org/pypi/msgpack-python&#34;&gt;msgpack-python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;div&gt;
  Here is my Python 2.7.2 test script using timeit for each encode and decode step.
&lt;/div&gt;
&lt;br&gt;
Dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install tabulate simplejson python-cjson ujson yajl msgpack-python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test:&lt;/p&gt;


from timeit import timeit 
from tabulate import tabulate

setup = &#39;&#39;&#39;d = {
    &#39;words&#39;: &#34;&#34;&#34;
        Lorem ipsum dolor sit amet, consectetur adipiscing 
        elit. Mauris adipiscing adipiscing placerat. 
        Vestibulum augue augue, 
        pellentesque quis sollicitudin id, adipiscing.
        &#34;&#34;&#34;,
    &#39;list&#39;: range(100),
    &#39;dict&#39;: dict((str(i),&#39;a&#39;) for i in xrange(100)),
    &#39;int&#39;: 100,
    &#39;float&#39;: 100.123456
}&#39;&#39;&#39;

setup_pickle    = &#39;%s ; import cPickle ; src = cPickle.dumps(d)&#39; % setup
setup_pickle2   = &#39;%s ; import cPickle ; src = cPickle.dumps(d, 2)&#39; % setup
setup_json      = &#39;%s ; import json; src = json.dumps(d)&#39; % setup
setup_msgpack   = &#39;%s ; src = msgpack.dumps(d)&#39; % setup

tests = [
    # (title, setup, enc_test, dec_test)
    (&#39;pickle (ascii)&#39;, &#39;import pickle; %s&#39; % setup_pickle, &#39;pickle.dumps(d, 0)&#39;, &#39;pickle.loads(src)&#39;),
    (&#39;pickle (binary)&#39;, &#39;import pickle; %s&#39; % setup_pickle2, &#39;pickle.dumps(d, 2)&#39;, &#39;pickle.loads(src)&#39;),
    (&#39;cPickle (ascii)&#39;, &#39;import cPickle; %s&#39; % setup_pickle, &#39;cPickle.dumps(d, 0)&#39;, &#39;cPickle.loads(src)&#39;),
    (&#39;cPickle (binary)&#39;, &#39;import cPickle; %s&#39; % setup_pickle2, &#39;cPickle.dumps(d, 2)&#39;, &#39;cPickle.loads(src)&#39;),
    (&#39;json&#39;, &#39;import json; %s&#39; % setup_json, &#39;json.dumps(d)&#39;, &#39;json.loads(src)&#39;),
    (&#39;simplejson-3.3.1&#39;, &#39;import simplejson; %s&#39; % setup_json, &#39;simplejson.dumps(d)&#39;, &#39;simplejson.loads(src)&#39;),
    (&#39;python-cjson-1.0.5&#39;, &#39;import cjson; %s&#39; % setup_json, &#39;cjson.encode(d)&#39;, &#39;cjson.decode(src)&#39;),
    (&#39;ujson-1.33&#39;, &#39;import ujson; %s&#39; % setup_json, &#39;ujson.dumps(d)&#39;, &#39;ujson.loads(src)&#39;),
    (&#39;yajl 0.3.5&#39;, &#39;import yajl; %s&#39; % setup_json, &#39;yajl.dumps(d)&#39;, &#39;yajl.loads(src)&#39;),
    (&#39;msgpack-python-0.3.0&#39;, &#39;import msgpack; %s&#39; % setup_msgpack, &#39;msgpack.dumps(d)&#39;, &#39;msgpack.loads(src)&#39;),
]

loops = 15000
enc_table = []
dec_table = []

print &#34;Running tests (%d loops each)&#34; % loops

for title, mod, enc, dec in tests:
    print title

    print &#34;  [Encode]&#34;, enc 
    result = timeit(enc, mod, number=loops)
    enc_table.append([title, result])

    print &#34;  [Decode]&#34;, dec 
    result = timeit(dec, mod, number=loops)
    dec_table.append([title, result])

enc_table.sort(key=lambda x: x[1])
enc_table.insert(0, [&#39;Package&#39;, &#39;Seconds&#39;])

dec_table.sort(key=lambda x: x[1])
dec_table.insert(0, [&#39;Package&#39;, &#39;Seconds&#39;])

print &#34;\nEncoding Test (%d loops)&#34; % loops
print tabulate(enc_table, headers=&#34;firstrow&#34;)

print &#34;\nDecoding Test (%d loops)&#34; % loops
print tabulate(dec_table, headers=&#34;firstrow&#34;)


&lt;p&gt;OUTPUT:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Running tests (15000 loops each)
pickle (ascii)
  [Encode] pickle.dumps(d, 0)
  [Decode] pickle.loads(src)
pickle (binary)
  [Encode] pickle.dumps(d, 2)
  [Decode] pickle.loads(src)
cPickle (ascii)
  [Encode] cPickle.dumps(d, 0)
  [Decode] cPickle.loads(src)
cPickle (binary)
  [Encode] cPickle.dumps(d, 2)
  [Decode] cPickle.loads(src)
json
  [Encode] json.dumps(d)
  [Decode] json.loads(src)
simplejson-3.3.1
  [Encode] simplejson.dumps(d)
  [Decode] simplejson.loads(src)
python-cjson-1.0.5
  [Encode] cjson.encode(d)
  [Decode] cjson.decode(src)
ujson-1.33
  [Encode] ujson.dumps(d)
  [Decode] ujson.loads(src)
yajl 0.3.5
  [Encode] yajl.dumps(d)
  [Decode] yajl.loads(src)
msgpack-python-0.3.0
  [Encode] msgpack.dumps(d)
  [Decode] msgpack.loads(src)

Encoding Test (15000 loops)
Package                 Seconds
--------------------  ---------
ujson-1.33             0.232215
msgpack-python-0.3.0   0.241945
cPickle (binary)       0.305273
yajl 0.3.5             0.634148
python-cjson-1.0.5     0.680604
json                   0.780438
simplejson-3.3.1       1.04763
cPickle (ascii)        1.62062
pickle (ascii)        14.0497
pickle (binary)       15.4712

Decoding Test (15000 loops)
Package                 Seconds
--------------------  ---------
msgpack-python-0.3.0   0.240885
cPickle (binary)       0.393152
ujson-1.33             0.396875
python-cjson-1.0.5     0.694321
yajl 0.3.5             0.748369
simplejson-3.3.1       0.780531
cPickle (ascii)        1.38561
json                   1.65921
pickle (binary)        5.20554
pickle (ascii)        17.8767
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    
  </channel>
</rss>