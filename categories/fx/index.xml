<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>JustinFX.com</title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://justinfx.com/categories/fx/index.xml</link>
    <language>en-us</language>
    
    <copyright>2018 Justin Israel</copyright>
    <updated>2006-01-02 15:04:05 &#43;0000 MST</updated>
    
    
    <item>
      <title>Tutorial: PyQt4 UI Development for Maya</title>
      <link>http://justinfx.com/2012/10/12/pyqt4-for-maya/</link>
      <pubDate>2006-01-02 15:04:05 &#43;0000 MST</pubDate>
      
      <guid>http://justinfx.com/2012/10/12/pyqt4-for-maya/</guid>
      <description>

&lt;h2 id=&#34;img-class-alignnone-size-full-wp-image-525-title-pyqt4-for-maya-src-wp-content-uploads-2012-10-1350054625-master-jpeg-alt-width-800-height-450-http-www-cmivfx-com-tutorials-view-498-pyqt4-ui-development-for-maya&#34;&gt;&lt;a href=&#34;http://www.cmivfx.com/tutorials/view/498/PyQt4+UI+Development+for+Maya&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-525&#34; title=&#34;PyQt4 for Maya&#34; src=&#34;http://justinfx.com/wp-content/uploads/2012/10/1350054625_Master.jpeg&#34; alt=&#34;&#34; width=&#34;800&#34; height=&#34;450&#34; /&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h1 id=&#34;pyqt4-ui-development-for-maya&#34;&gt;PyQt4 UI Development for Maya&lt;/h1&gt;

&lt;p&gt;Just released my 3rd python-based online training video through &lt;a href=&#34;https://cmivfx.com/store/498-pyqt4+ui+development+for+maya&#34;&gt;cmiVFX.com&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;

&lt;div&gt;
  This tutorial is about learning PyQt4 python bindings for the Qt Framework, and how to introduce new UI elements to Maya as a platform.
&lt;/div&gt;

&lt;div&gt;
  We discuss what comprises a &amp;#8220;Framework&amp;#8221; and a &amp;#8220;GUI Framework&amp;#8221;, and how Qt and PyQt4 work together.
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;getting-started-with-pyqt4&#34;&gt;&lt;strong&gt;Getting Started With PyQt4&lt;/strong&gt;&lt;/h3&gt;

&lt;div&gt;
  There are multiple ways of getting a working installation of PyQt4, both for the general system and for Maya. We look into these approaches to get your system up and running to begin working with PyQt4!
&lt;/div&gt;

&lt;div&gt;
  We also talk about what is included, such as command line tools and applications, tips on how to test and learn the code, and how to structure a project.
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;pyqt4-fundamentals&#34;&gt;&lt;strong&gt;PyQt4 Fundamentals&lt;/strong&gt;&lt;/h3&gt;

&lt;div&gt;
  Lets get crackin&amp;#8217; and learn the basics!
&lt;/div&gt;

&lt;div&gt;
  • What is a QObject? What is a QWidget? Common PyQt4 classes are explained in detail
&lt;/div&gt;

&lt;div&gt;
  • Working with the Qt Designer application, to build a UI visually
&lt;/div&gt;

&lt;div&gt;
  • Layouts: Making widgets resize elegantly and stay organized in your design
&lt;/div&gt;

&lt;div&gt;
  • Coordinate space: How do widgets transform in your 2D screen space?
&lt;/div&gt;

&lt;div&gt;
  • QApplication and the Qt Event Loop: The engine that runs your UI
&lt;/div&gt;

&lt;div&gt;
  • Events, Signals, and Slots: How components communicate changes and how the application can respond to changes to make it dynamic
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;general-examples&#34;&gt;&lt;strong&gt;General Examples&lt;/strong&gt;&lt;/h3&gt;

&lt;div&gt;
  With an understanding of the framework components, we can begin working with fully functional stand-alone examples.
&lt;/div&gt;

&lt;div&gt;
  • Common PyQt4 app template
&lt;/div&gt;

&lt;div&gt;
  • Subclassing Widgets: Creating custom functionality to the existing classes provided by PyQt4
&lt;/div&gt;

&lt;div&gt;
  • Dialogs: Raising dialog windows above existing windows, Modal vs Non-modal, and creating forms. We look at different ways to validate the data provided by the user, to these dialog forms.
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;pyqt4-and-maya-introduction&#34;&gt;&lt;strong&gt;PyQt4 And Maya Introduction&lt;/strong&gt;&lt;/h3&gt;

&lt;div&gt;
  Finally, some Maya action! Maya has a slightly different approach to using PyQt4…
&lt;/div&gt;

&lt;div&gt;
  • How does the QApplication and event loop work?
&lt;/div&gt;

&lt;div&gt;
  • Common Maya PyQt4 app template
&lt;/div&gt;

&lt;div&gt;
  • Looking at the Maya API&amp;#8217;s MQtUtil class
&lt;/div&gt;

&lt;div&gt;
  • The sip module: Helping us translate between Maya&amp;#8217;s Qt and our own PyQt4 code
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;replicating-maya-8217-s-ui-components&#34;&gt;&lt;strong&gt;Replicating Maya&amp;#8217;s UI Components&lt;/strong&gt;&lt;/h3&gt;

&lt;div&gt;
  What better way to see examples of creating UI for Maya than to replicate some existing functionality? This gives us the opportunity expand with custom functionality
&lt;/div&gt;

&lt;div&gt;
  In this chapter we will take two different UI components in Maya, and do a basic custom version of our own, and show to how link them up to Maya&amp;#8217;s own callbacks.
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;strong&gt;Some Features Of This Chapter Include&lt;/strong&gt;
&lt;/div&gt;

&lt;div&gt;
  • The QTableWidget
&lt;/div&gt;

&lt;div&gt;
  • Model / View separation with QTreeView
&lt;/div&gt;

&lt;div&gt;
  • Docking windows into the Maya interface
&lt;/div&gt;

&lt;div&gt;
  • Mixing together PyQt4, the Maya API, Maya commands, and callbacks
&lt;/div&gt;

&lt;div&gt;
  • Sorting model data
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;customizations&#34;&gt;&lt;strong&gt;Customizations&lt;/strong&gt;&lt;/h3&gt;

&lt;div&gt;
  A button can be a button, and a slider might look alright in its stock form, but sometimes we want to customize the look of our widgets. This chapter introduces multiple ways of achieving custom looks to our components
&lt;/div&gt;

&lt;div&gt;
  • Stylin&amp;#8217; Stylesheets: Use CSS-like syntax for applying style sheets to widgets
&lt;/div&gt;

&lt;div&gt;
  • Painting By … Paint events: For even more control, we can tell a widget exactly how to draw itself on the screen. We will look at two different examples of how to use custom painting.
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;span-style-color-ff6600-previous-cmivfx-tutorials-span&#34;&gt;&lt;span style=&#34;color: #ff6600;&#34;&gt;Previous cmiVFX tutorials:&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cmivfx.com/store/320-python+introduction+vol+01+-+maya&#34;&gt;Intro to Python for Maya &amp;#8211; Vol 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cmivfx.com/store/328-python-for-maya-vol-02&#34;&gt;Python for Maya  &amp;#8211; Vol 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Getting started with XBOX 360 Kinect on OSX</title>
      <link>http://justinfx.com/2012/06/21/getting-started-with-xbox-360-kinect-on-osx/</link>
      <pubDate>2006-01-02 15:04:05 &#43;0000 MST</pubDate>
      
      <guid>http://justinfx.com/2012/06/21/getting-started-with-xbox-360-kinect-on-osx/</guid>
      <description>

&lt;p&gt;A recent project of mine involves research and development with an XBOX 360 Kinect Sensor. Being a python guy, I started searching for python bindings to some OSX-supported framework. When you just get started looking into this area it can be a little confusing. There are a number of layers to the software stack to enable one to accomplish anything meaningful. This is just a short and general blog post outlining the basics of what I have discovered thus far, to help anyone else that might also be getting started.&lt;/p&gt;

&lt;p&gt;At the lowest level, you need a driver. Something that can talk to the USB device that is the Kinect sensor. When you purchase the XBOX Kinect for Windows version of the sensor, and you are going to be developing on windows, much of this whole stack is provided to you by way of the Kinect SDK. But for the open source folks with the standard XBOX 360 sensor, you need to piece together your own solution.&lt;/p&gt;

&lt;p&gt;Two drivers that I have discovered thus far:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openkinect.org/wiki/Main_Page&#34;&gt;OpenKinect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/avin2/SensorKinect&#34;&gt;PrimeSense Sensor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I had started OpenKinect (libfreenect) because it comes with a &lt;a href=&#34;https://github.com/OpenKinect/libfreenect/tree/master/wrappers/python&#34;&gt;python wrapper&lt;/a&gt; included. There were a few dependencies (I will talk about specific build steps in just a moment), but once I got this installed I was able to fire up the included  glview app and see both depth and rgb data streaming in from my sensor. The role of these drivers is to provide simply the basic streams. That is, the depth, rgb, audio, and a few other sensor data streams. If your goal is to start tracking players, seeing skeletons, and registering gestures, the drivers are not enough. You would be required to make your own solution from this raw data at this phase in the game.&lt;/p&gt;

&lt;p&gt;You would now want to look into middleware that can take the raw data and provide to you an API with higher level information. This would include finding users in the scene for you, tracking their body features, and giving you various events to watch for as the data streams.&lt;/p&gt;

&lt;p&gt;Being that my goal was to have python bindings, I found my options to be much more limited than if I were going to be developing in C++. Wrappers have to exist for the framework you want. This is where my research really started ramping up. I spent a few days dealing wtih compiling issues, as well as having an actual bad power adapter that had to be exchanged. But all said and done, here is what I have settled on thus far&amp;#8230;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Driver: &lt;a href=&#34;https://github.com/avin2/SensorKinect&#34;&gt;PrimeSense Sensor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OpenNI/OpenNI&#34;&gt;OpenNI Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A recent project of mine involves research and development with an XBOX 360 Kinect Sensor. Being a python guy, I started searching for python bindings to some OSX-supported framework. When you just get started looking into this area it can be a little confusing. There are a number of layers to the software stack to enable one to accomplish anything meaningful. This is just a short and general blog post outlining the basics of what I have discovered thus far, to help anyone else that might also be getting started.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At the lowest level, you need a driver. Something that can talk to the USB device that is the Kinect sensor. When you purchase the XBOX Kinect for Windows version of the sensor, and you are going to be developing on windows, much of this whole stack is provided to you by way of the Kinect SDK. But for the open source folks with the standard XBOX 360 sensor, you need to piece together your own solution.&lt;/p&gt;

&lt;p&gt;Two drivers that I have discovered thus far:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openkinect.org/wiki/Main_Page&#34;&gt;OpenKinect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/avin2/SensorKinect&#34;&gt;PrimeSense Sensor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I had started OpenKinect (libfreenect) because it comes with a &lt;a href=&#34;https://github.com/OpenKinect/libfreenect/tree/master/wrappers/python&#34;&gt;python wrapper&lt;/a&gt; included. There were a few dependencies (I will talk about specific build steps in just a moment), but once I got this installed I was able to fire up the included  glview app and see both depth and rgb data streaming in from my sensor. The role of these drivers is to provide simply the basic streams. That is, the depth, rgb, audio, and a few other sensor data streams. If your goal is to start tracking players, seeing skeletons, and registering gestures, the drivers are not enough. You would be required to make your own solution from this raw data at this phase in the game.&lt;/p&gt;

&lt;p&gt;You would now want to look into middleware that can take the raw data and provide to you an API with higher level information. This would include finding users in the scene for you, tracking their body features, and giving you various events to watch for as the data streams.&lt;/p&gt;

&lt;p&gt;Being that my goal was to have python bindings, I found my options to be much more limited than if I were going to be developing in C++. Wrappers have to exist for the framework you want. This is where my research really started ramping up. I spent a few days dealing wtih compiling issues, as well as having an actual bad power adapter that had to be exchanged. But all said and done, here is what I have settled on thus far&amp;#8230;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Driver: &lt;a href=&#34;https://github.com/avin2/SensorKinect&#34;&gt;PrimeSense Sensor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OpenNI/OpenNI&#34;&gt;OpenNI Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.openni.org/Downloads/OpenNIModules.aspx&#34;&gt;OpenNI Modules&lt;/a&gt; for OpenNI&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jmendeth/PyOpenNI&#34;&gt;PyOpenNI&lt;/a&gt; python bindings&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;span-style-text-decoration-underline-install-details-span&#34;&gt;&lt;span style=&#34;text-decoration: underline;&#34;&gt;Install Details&lt;/span&gt;&lt;/h4&gt;

&lt;h5 id=&#34;install-homebrew-package-manager&#34;&gt;&lt;strong&gt;Install homebrew (package manager)&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://mxcl.github.com/homebrew/&#34;&gt;http://mxcl.github.com/homebrew/&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;install-build-tools&#34;&gt;&lt;strong&gt;Install build tools&lt;/strong&gt;&lt;/h5&gt;

&lt;pre&gt;brew install cmake
brew install boost&lt;/pre&gt;

&lt;h5 id=&#34;install-python2-7&#34;&gt;&lt;strong&gt;Install python2.7&lt;/strong&gt;&lt;/h5&gt;

&lt;pre&gt;brew install python --framework&lt;/pre&gt;

&lt;h5 id=&#34;suggestion-virtualenv-environment&#34;&gt;&lt;strong&gt;Suggestion: virtualenv Environment&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;This is not a requirement. But I recommend using virtualenv to set up an environment that specifically uses python2.7 so that you don&amp;#8217;t have to fight with mixed dependencies and versions.&lt;/p&gt;

&lt;p&gt;Create a virtualenv called &amp;#8220;kinect&amp;#8221;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;pip install virtualenv
virtualenv --no-site-packages -p python2.7 kinect
&lt;span style=&#34;color: #007020&#34;&gt;cd&lt;/span&gt; kinect
&lt;span style=&#34;color: #007020&#34;&gt;source&lt;/span&gt; bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id=&#34;install-libusb-patched-version&#34;&gt;&lt;strong&gt;Install libusb (patched version)&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;There is a special patched version of the libusb library, in the form of a homebrew formula.&lt;/p&gt;

&lt;pre class=&#34;lang:default decode:true&#34;&gt;git clone https://github.com/OpenKinect/libfreenect.git&lt;/pre&gt;

&lt;p&gt;Now copy platform/osx/homebrew/libusb-freenect.rb -&amp;gt; /usr/local/Library/Formula/&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install libusb-freenect
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;install-sensorkinect-drivers&#34;&gt;&lt;strong&gt;Install SensorKinect drivers&lt;/strong&gt;&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/avin2/SensorKinect.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then uncompress Bin/SensorKinect093-Bin-MacOSX-v*tar.bz2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo ./install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;install-openni-framework&#34;&gt;&lt;strong&gt;Install OpenNI framework&lt;/strong&gt;&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Go here: &lt;a href=&#34;http://www.openni.org/Downloads/OpenNIModules.aspx&#34;&gt;http://www.openni.org/Downloads/OpenNIModules.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download Unstable Binary for MacOSX&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo ./install.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;install-nite-middleware-for-openni&#34;&gt;&lt;strong&gt;Install NITE middleware (for OpenNI)&lt;/strong&gt;&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Go here: &lt;a href=&#34;http://www.openni.org/Downloads/OpenNIModules.aspx&#34;&gt;http://www.openni.org/Downloads/OpenNIModules.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download Unstable MIDDLEWARE of NITE for OSX&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo ./install.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;install-pyopenni&#34;&gt;&lt;strong&gt;Install PyOpenNI&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Be aware that on OSX, PyOpenNI requires a framework build of python 2.7+ and that you must build it for x86_64 specifically. Also, I was having major problems with cmake properly finding the python includes location. I had to suggest a fix, so &lt;a href=&#34;https://github.com/jmendeth/PyOpenNI/issues/16#issuecomment-6515678&#34;&gt;please see here for the necessary corrections&lt;/a&gt;. I have referenced a patched fork of the repository below.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #bb60d5&#34;&gt;CPPFLAGS&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;-arch x86_64&amp;quot;&lt;/span&gt;
git clone git://github.com/justinfx/PyOpenNI.git
mkdir PyOpenNI-build
&lt;span style=&#34;color: #007020&#34;&gt;cd&lt;/span&gt; PyOpenNI-build
cmake -D &lt;span style=&#34;color: #bb60d5&#34;&gt;PYTHON_INCLUDE_DIR&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Headers ../PyOpenNI
make
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;copy the lib/openni.so module to the python2.7 site-packages&lt;/p&gt;

&lt;h4 id=&#34;span-style-text-decoration-underline-examples-span&#34;&gt;&lt;span style=&#34;text-decoration: underline;&#34;&gt;Examples&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Once you have everything installed, you can try out the examples that are included both in the NITE source location that you downloaded and also in the PyOpenNI source location:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;NITE/Samples&lt;/li&gt;
&lt;li&gt;PyOpenNI/examples&lt;/li&gt;
&lt;/ol&gt;

&lt;div&gt;
  I also tried out ofxKinect (&lt;a href=&#34;https://github.com/ofTheo/ofxKinect&#34;&gt;github.com/ofTheo/ofxKinect&lt;/a&gt;) on the side, which is an addon for  &lt;a href=&#34;http://www.openframeworks.cc/&#34;&gt;OpenFrameworks&lt;/a&gt;. This is kind of a separate path than the OpenNI stack. I would say its more like an advanced offering of libfreenect. Using the included example, I recorded a 3D point cloud that is built on the fly from the RGB and depth data:
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;div class=&#34;embed video-player&#34;&gt;
	&lt;iframe class=&#34;youtube-player&#34; 
			type=&#34;text/html&#34; 
			width=&#34;640&#34; height=&#34;385&#34; 
			src=&#34;http://www.youtube.com/embed/vICLgxnZ1Bs&#34; 
			allowfullscreen 
			frameborder=&#34;0&#34;&gt;
	&lt;/iframe&gt;
&lt;/div&gt;



&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Mixing PyQt4 widgets and Maya UI objects</title>
      <link>http://justinfx.com/2011/11/20/mixing-pyqt4-widgets-and-maya-ui-objects/</link>
      <pubDate>2006-01-02 15:04:05 &#43;0000 MST</pubDate>
      
      <guid>http://justinfx.com/2011/11/20/mixing-pyqt4-widgets-and-maya-ui-objects/</guid>
      <description>&lt;p&gt;A question came up in the &lt;a href=&#34;http://groups.google.com/group/python_inside_maya&#34;&gt;Maya-Python mailing list&lt;/a&gt; that I thought was a really good topic, and should be reposted.&lt;/p&gt;

&lt;p&gt;Someone asked how you can create maya UI objects and embed them within your main PyQt application. Specifically he wanted to create a modelPanel and embed it so that he would have a camera view within his own PyQt window.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: Instructions for Maya 2017+, using PySide2 and Qt5, are available via this &lt;a href=&#34;http://blog.virtualmethodstudio.com/2017/03/embed-maya-native-ui-objects-in-pyside2/&#34;&gt;blog post by Lidia Martínez&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Here is my example of how to achieve this&amp;#8230;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;PyQt4&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;import&lt;/span&gt; QtCore, QtGui

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;maya.cmds&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;cmds&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;maya.OpenMayaUI&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;mui&lt;/span&gt;

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;sip&lt;/span&gt;


&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;MyDialog&lt;/span&gt;(QtGui&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;QDialog):

    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;__init__&lt;/span&gt;(&lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;, parent, &lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color: #007020&#34;&gt;super&lt;/span&gt;(MyDialog, &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;__init__(parent, &lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt;kwargs)
        
        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;setObjectName(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;MyWindow&amp;quot;&lt;/span&gt;)
        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;resize(&lt;span style=&#34;color: #40a070&#34;&gt;800&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;600&lt;/span&gt;)
        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;setWindowTitle(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;PyQt ModelPanel Test&amp;quot;&lt;/span&gt;)

        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;verticalLayout &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; QtGui&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;QVBoxLayout(&lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;)
        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;verticalLayout&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;setContentsMargins(&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;)

        &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# need to set a name so it can be referenced by maya node path&lt;/span&gt;
        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;verticalLayout&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;setObjectName(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;mainLayout&amp;quot;&lt;/span&gt;)
        
        &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# First use SIP to unwrap the layout into a pointer&lt;/span&gt;
        &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# Then get the full path to the UI in maya as a string&lt;/span&gt;
        layout &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; mui&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;MQtUtil&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;fullName(&lt;span style=&#34;color: #007020&#34;&gt;long&lt;/span&gt;(sip&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;unwrapinstance(&lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;verticalLayout)))
        cmds&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;setParent(layout)

        paneLayoutName &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; cmds&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;paneLayout()
        
        &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# Find a pointer to the paneLayout that we just created&lt;/span&gt;
        ptr &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; mui&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;MQtUtil&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;findControl(paneLayoutName)
        
        &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# Wrap the pointer into a python QObject&lt;/span&gt;
        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;paneLayout &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; sip&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;wrapinstance(&lt;span style=&#34;color: #007020&#34;&gt;long&lt;/span&gt;(ptr), QtCore&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;QObject)

        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;cameraName &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; cmds&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;camera()[&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;]
        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;modelPanelName &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; cmds&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;modelPanel(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;customModelPanel&amp;quot;&lt;/span&gt;, label&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;ModelPanel Test&amp;quot;&lt;/span&gt;, cam&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;cameraName)
        
        &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# Find a pointer to the modelPanel that we just created&lt;/span&gt;
        ptr &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; mui&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;MQtUtil&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;findControl(&lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;modelPanelName)
        
        &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# Wrap the pointer into a python QObject&lt;/span&gt;
        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;modelPanel &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; sip&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;wrapinstance(&lt;span style=&#34;color: #007020&#34;&gt;long&lt;/span&gt;(ptr), QtCore&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;QObject)

        &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# add our QObject reference to the paneLayout to our layout&lt;/span&gt;
        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;verticalLayout&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;addWidget(&lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;paneLayout)

    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;showEvent&lt;/span&gt;(&lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;, event):
        &lt;span style=&#34;color: #007020&#34;&gt;super&lt;/span&gt;(MyDialog, &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;showEvent(event)

        &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# maya can lag in how it repaints UI. Force it to repaint&lt;/span&gt;
        &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# when we show the window.&lt;/span&gt;
        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;modelPanel&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;repaint()
                    

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;show&lt;/span&gt;():
    &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# get a pointer to the maya main window&lt;/span&gt;
    ptr &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; mui&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;MQtUtil&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;mainWindow()
    &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# use sip to wrap the pointer into a QObject&lt;/span&gt;
    win &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; sip&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;wrapinstance(&lt;span style=&#34;color: #007020&#34;&gt;long&lt;/span&gt;(ptr), QtCore&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;QObject)
    d &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; MyDialog(win)
    d&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;show()

    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; d


&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;try&lt;/span&gt;:
    dialog&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;deleteLater()
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;except&lt;/span&gt;:
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;pass&lt;/span&gt;    
dialog &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; show()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You need sip and the MQtUtil functions to convert between maya node paths and python Qbjects. Its the same idea as having to use those functions to get a reference to the maya MainWindow, in order to parent your dialog.&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>Python for Maya Artists – Volume 2</title>
      <link>http://justinfx.com/2011/11/15/python-for-maya-artists-volume-2/</link>
      <pubDate>2006-01-02 15:04:05 &#43;0000 MST</pubDate>
      
      <guid>http://justinfx.com/2011/11/15/python-for-maya-artists-volume-2/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://cmivfx.com/store/328-python-for-maya-vol-02&#34;&gt;&lt;img class=&#34;alignnone&#34; src=&#34;http://justinfx.com/wp-content/uploads/2011/11/maya_python_vol2.jpg&#34; alt=&#34;&#34; width=&#34;60%&#34; height=&#34;60%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Second video in the python for maya series, just released through &lt;a href=&#34;http://www.cmivfx.com&#34;&gt;cmiVFX&lt;/a&gt;!&lt;/p&gt;

&lt;h3 id=&#34;python-for-maya-8211-volume-2-https-cmivfx-com-store-328-python-for-maya-vol-02&#34;&gt;&lt;a href=&#34;https://cmivfx.com/store/328-python-for-maya-vol-02&#34;&gt;Python For Maya &amp;#8211; Volume 2&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;If you watched the first video, you now have a good grasp on Python. Sweet. Let&amp;#8217;s plow through some more involved concepts like python juggernauts!&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With a working knowledge of the python scripting language, and the Maya Python commands API, we can continue to learn new ways to solve more challenging problems, create complete scripts, and build user interfaces around our tools. We also introduce the Maya Python API; a lower-level interface into Maya.&lt;/p&gt;

&lt;p&gt;This video focuses more on breaking down full scripts, as opposed to typing out syntax. Its jam packaged with information and moves fast to deliver you as much brain food as possible. The first segment of the video transitions from beginning to intermediate level, with the majority of the video being intermediate, and finishing out by touching on advanced concepts. The included project files are abundant, complete, and full of helpful documentation so that you can take your time and learn about each piece of the tools.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you check it out, leave me feedback!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://cmivfx.com/store/328-python-for-maya-vol-02&#34;&gt;https://cmivfx.com/store/328-python-for-maya-vol-02&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First video can be &lt;a href=&#34;http://justinfx.com/2011/10/08/intro-to-python-for-maya-artists-tutorial/&#34;&gt;found here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Installing PyQt4 for Maya 2012&#43; (osx)</title>
      <link>http://justinfx.com/2011/11/09/installing-pyqt4-for-maya-2012-osx/</link>
      <pubDate>2006-01-02 15:04:05 &#43;0000 MST</pubDate>
      
      <guid>http://justinfx.com/2011/11/09/installing-pyqt4-for-maya-2012-osx/</guid>
      <description>&lt;p&gt;This is a follow up post to my previous one on &lt;a href=&#34;http://justinfx.com/2011/01/07/installing-pyqt-for-maya-2011-osx/&#34;&gt;Installing PyQt4 for Maya 2011&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recently while putting together my next video tutorial for Python for Maya, I came to a section where I wanted to demo PyQt4 in Maya2012. But I was concerned that viewers would have to go through the complicated steps of building PyQt4. I noticed that other people have made available precompiled PyQt installers for windows (&lt;a href=&#34;http://blarg.robertkist.com/?p=51&#34; target=&#34;_blank&#34; class=&#34;broken_link&#34;&gt;here&lt;/a&gt;) but I could not find any for OSX or linux. So I decided to put together a build.&lt;/p&gt;

&lt;p&gt;I created a new project on github called MyQt4&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/justinfx/MyQt4&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/justinfx/MyQt4&#34;&gt;https://github.com/justinfx/MyQt4&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Its a Makefile for completely downloading and building PyQt4 for maya, and generating a .pkg installer. Hopefully someone can contribute improvements since I dont have a ton of experience writing makefiles, and also that someone might create a linux version.&lt;/p&gt;

&lt;p&gt;Here is a link to the latest pkg build:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Snow Leopard: &lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Maya2011: &lt;a href=&#34;https://dl.dropbox.com/u/34613220/MyQt4/MyQt4.7.4-maya2011-x64-osx-10.6.pkg&#34; target=&#34;_blank&#34;&gt;MyQt4.7.4-maya2011-x64-osx-10.6.pkg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Maya2012: &lt;a href=&#34;https://dl.dropbox.com/u/34613220/MyQt4/MyQt4.9.4-maya2012-x64-osx-10.6.pkg&#34; target=&#34;_blank&#34;&gt;MyQt4.9.4-maya2012-x64-osx-10.6.pkg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Maya2013: &lt;a href=&#34;https://dl.dropbox.com/u/34613220/MyQt4/MyQt4.9.4-maya2013-x64-osx-10.6.pkg&#34; target=&#34;_blank&#34;&gt;MyQt4.9.4-maya2013-x64-osx-10.6.pkg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Lion:  &lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Maya2012: &lt;a href=&#34;http://dl.dropbox.com/u/34613220/MyQt4/MyQt4.8.6-maya2012-x64-osx-10.7.pkg&#34; target=&#34;_blank&#34;&gt;MyQt4.8.6-maya2012-x64-osx-10.7.pkg&lt;/a&gt;   (Thanks &lt;a href=&#34;https://github.com/cgrebeld&#34; target=&#34;_blank&#34;&gt;Chris&lt;/a&gt;!)&lt;/li&gt;
&lt;li&gt;Maya2013: &lt;a href=&#34;http://dl.dropbox.com/u/34613220/MyQt4/MyQt4.8.6-maya2013-x64-osx-10.7.pkg&#34;&gt;MyQt4.8.6-maya2013-x64-osx-10.7.pkg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Mountain Lion:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;line-height: 13px;&#34;&gt;Maya2011:&lt;a href=&#34;http://infixlabs.com/MyQt/MyQt4.7.4-maya2011-x64-osx-20130114.pkg&#34;&gt; MyQt4.7.4-maya2011&lt;wbr /&gt;-x64-osx-20130114.pkg&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are builds other people have made:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Win 32bit: &lt;a href=&#34;http://blarg.robertkist.com/?p=51&#34;&gt;http://blarg.robertkist.com/?p=51&lt;/a&gt;{.broken_link}&lt;/li&gt;
&lt;li&gt;Win 64bit:  &lt;a href=&#34;http://nathanhorne.com/?p=322&#34;&gt;http://nathanhorne.com/?p=322  &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Win 7 64bit Maya 2013: &lt;a href=&#34;https://www.box.com/s/1db3b0c903059ac89fc4&#34;&gt;https://www.box.com/s/1db3b0c903059ac89fc4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linux:  &lt;a href=&#34;http://www.kurianos.com/wordpress/?p=551&#34;&gt;http://www.kurianos.com/wordpress/?p=551&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Intro to Python for Maya Artists – Tutorial</title>
      <link>http://justinfx.com/2011/10/08/intro-to-python-for-maya-artists-tutorial/</link>
      <pubDate>2006-01-02 15:04:05 &#43;0000 MST</pubDate>
      
      <guid>http://justinfx.com/2011/10/08/intro-to-python-for-maya-artists-tutorial/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://cmivfx.com/store/320-Python+Introduction+Vol+01+-+Maya&#34;&gt;&lt;img class=&#34;alignnone&#34; alt=&#34;&#34; src=&#34;http://justinfx.com/wp-content/uploads/2011/10/1318089294_Python_Background_master.jpg&#34; width=&#34;60%&#34; height=&#34;60%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just released my first online video tutorial, through &lt;a href=&#34;http://www.cmivfx.com&#34;&gt;cmiVFX&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;python-introduction-vol-01-8211-maya-http-cmivfx-com-store-320-python-introduction-vol-01-maya&#34;&gt;&lt;a href=&#34;http://cmivfx.com/store/320-Python+Introduction+Vol+01+-+Maya&#34;&gt;Python Introduction Vol 01 &amp;#8211; Maya&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Amazing at Animation? Master of Modeling? Conquistador of Character Rigging?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But how is your Python?&lt;/p&gt;

&lt;p&gt;This course brings the talented artist into the fold of the technical-side of Maya. Learn the basics of Python, and its place in your 3D workflow, with visual examples and real world problems. Get a kick-start on adding some automation into your life, and solving common problems in a fraction of the time. By the end of this video, you should have a deeper understanding of one of the languages Maya speaks under the hood, and how to start viewing your scenes in terms of glorious Python code!&lt;/p&gt;

&lt;p&gt;Check it out: &lt;a href=&#34;http://cmivfx.com/store/320-Python+Introduction+Vol+01+-+Maya&#34;&gt;http://cmivfx.com/store/320-Python+Introduction+Vol+01+-+Maya&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you check out this course, please leave me some feedback! I would love to hear your thoughts.&lt;/p&gt;

&lt;p&gt;Stay tuned for more installments to come!&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Installing PyQt for maya 2011 (OSX)</title>
      <link>http://justinfx.com/2011/01/07/installing-pyqt-for-maya-2011-osx/</link>
      <pubDate>2006-01-02 15:04:05 &#43;0000 MST</pubDate>
      
      <guid>http://justinfx.com/2011/01/07/installing-pyqt-for-maya-2011-osx/</guid>
      <description>

&lt;h4 id=&#34;update&#34;&gt;Update:&lt;/h4&gt;

&lt;p&gt;I am now hosting a built package for Maya2011: &lt;a href=&#34;https://dl.dropbox.com/u/34613220/MyQt4/MyQt4.7.4-maya2011-x64-osx-10.6.pkg&#34;&gt;MyQt4.7.4-maya2011-x64-osx-10.6.pkg&lt;/a&gt; And for Maya 2012+, see: &lt;a href=&#34;http://justinfx.com/2011/11/09/installing-pyqt4-for-maya-2012-osx/&#34;&gt;Installing pyqt4 for maya2012&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Personally, when trying to run PyQt from within Maya 2009 / 2010 using the pumpThread method, I never had much luck. The best I ever got was the ability to bring up a dialog but not without locking up the UI, even though the pumpThread tool is meant to address that.&lt;/p&gt;

&lt;p&gt;Anyways, when I found out Maya 2011 was rewritten based on Qt for the UI, I was really stoked. I saw the example video of being able to design a ui file in Designer, and just directly open it in a maya script, and all I could think about was designing Qt GUIs so much more easily now. Turns out that Maya 2011 didn&amp;#8217;t actually ship with PyQt included for licensing reasons I&amp;#8217;m sure. But it included documentation on how one could go about building PyQt for maya. Unfortunately I had tons of issues that caused maya to just crash when importing PyQt.&lt;/p&gt;

&lt;p&gt;What I finally figured out was a mish-mash of information from the maya documention, and different forums and user groups. So I decided to make this easier on anyone having the same problems as I did, and just collect that information into one place. This process is for OSX. I&amp;#8217;m sure most of it is probably still relevant to linux or win, except for the last parts with &amp;#8216;install_name_tool&amp;#8217;. You would just need to make sure to find the right Qt/PyQt/SIP packages for your OS.&lt;/p&gt;

&lt;h5 id=&#34;building-pyqt4-for-maya-2011-on-osx&#34;&gt;Building PyQt4 for Maya 2011 on OSX&lt;/h5&gt;

&lt;hr /&gt;

&lt;h6 id=&#34;update-for-maya-2012&#34;&gt;&lt;em&gt;&lt;strong&gt;Update for Maya 2012&lt;/strong&gt;&lt;/em&gt;&lt;/h6&gt;

&lt;p&gt;While Maya uses newer versions, it seems the versions from the 2011 install still work. But here they are anyways incase you want the newer version for 2012:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Autodesk modified &lt;a href=&#34;http://images.autodesk.com/adsk/files/Qt-4.7.1-Modified_for_Maya.zip&#34;&gt;qt 4.7.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://justinfx.com/wp-content/uploads/2011/01/sip-4.12.4.tar.gz&#34;&gt;sip 4.12.4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dl.dropbox.com/u/34613220/MyQt4/src/PyQt-mac-gpl-4.8.6.tar.gz&#34;&gt;pyqt 4.8.6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Make sure you have downloaded and installed the latest XCode from Apple. Its also included on your OSX installation disc.&lt;/p&gt;

&lt;h6 id=&#34;qt-maya-has-a-specific-version-of-qt-built-into-it-this-is-qt-4-5-3&#34;&gt;Qt: Maya has a specific version of Qt built into it. This is Qt 4.5.3.&lt;/h6&gt;

&lt;ol&gt;
&lt;li&gt;Download:  &lt;a href=&#34;https://dl.dropbox.com/u/34613220/MyQt4/src/qt-mac-opensource-src-4.5.3.tar.gz&#34;&gt;qt-mac-opensource-src-4.5.3.tar.gz&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Extract: &lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;tar zxvf qt-mac-opensource-src-4.5.3.tar.gz
&lt;span style=&#34;color: #007020&#34;&gt;cd&lt;/span&gt; qt-mac-opensource-src-4.5.3
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build and install: &lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;./configure -cocoa -arch x86_64 -debug-and-release &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
  -no-phonon -no-phonon-backend -no-qt3support &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
  -no-webkit -nomake docs -nomake examples -nomake demos &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
  -nomake translations -no-rpath -no-framework
make -j 8
sudo make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h6 id=&#34;sip-the-maya-docs-recommend-sip-version-4-10&#34;&gt;SIP: The maya docs recommend sip version 4.10&lt;/h6&gt;

&lt;ol&gt;
&lt;li&gt;Download this specific SIP:   &lt;a href=&#34;http://justinfx.com/wp-content/uploads/2011/01/sip-4.10.tar.gz&#34;&gt;sip-4.10.tar.gz&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Extract: &lt;pre class=&#34;theme:twilight top-margin:20 bottom-margin:20 toolbar-overlay:false striped:false nums:false lang:sh decode:true&#34;&gt;tar zxvf sip-4.10.tar.gz
cd sip-4.10&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build and install: &lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;/Applications/Autodesk/maya2011/Maya.app/Contents/bin/mayapy &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
  configure.py --arch&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;x86_64
make -j 8
sudo make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h6 id=&#34;pyqt4-the-maya-docs-suggest-pyqt-4-7&#34;&gt;PyQt4: The maya docs suggest PyQt 4.7&lt;/h6&gt;

&lt;ol&gt;
&lt;li&gt;Download this specific PyQt: &lt;a href=&#34;https://dl.dropbox.com/u/34613220/MyQt4/src/PyQt-mac-gpl-4.7.4.tar.gz&#34;&gt;PyQt-mac-gpl-4.7.4.tar.gz&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Extract: &lt;pre class=&#34;striped:false nums:false lang:sh decode:true&#34;&gt;tar zxvf PyQt-mac-gpl-4.7.3.tar.gz
cd PyQt-mac-gpl-4.7.3&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set up some environment variables before building: &lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #bb60d5&#34;&gt;QTDIR&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;/usr/local/Trolltech/Qt-4.5.3
&lt;span style=&#34;color: #007020&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #bb60d5&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;/usr/local/Trolltech/Qt-4.5.3/bin:&lt;span style=&#34;color: #bb60d5&#34;&gt;$PATH&lt;/span&gt;
&lt;span style=&#34;color: #007020&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #bb60d5&#34;&gt;QMAKESPEC&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;/usr/local/Trolltech/Qt-4.5.3/mkspecs/macx-g++
&lt;span style=&#34;color: #007020&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #bb60d5&#34;&gt;DYLD_LIBRARY_PATH&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;/usr/local/Trolltech/Qt-4.5.3/lib
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build and install: &lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;/Applications/Autodesk/maya2011/Maya.app/Contents/bin/mayapy &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
  configure.py &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
  &lt;span style=&#34;color: #bb60d5&#34;&gt;LIBDIR_QT&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;/usr/local/Trolltech/Qt‐4.5.3/lib &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
  &lt;span style=&#34;color: #bb60d5&#34;&gt;INCDIR_QT&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;/usr/local/Trolltech/Qt‐4.5.3/include &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
  &lt;span style=&#34;color: #bb60d5&#34;&gt;MOC&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;/usr/local/Trolltech/Qt‐4.5.3/bin/moc &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
  -w --no-designer-plugin
make -j 8
sudo make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PyQt4 will now be installed into Maya&amp;#8217;s python site-packages, BUT will be linked against the wrong Qt binaries. The maya docs have an annoying multi step set of commands but they don&amp;#8217;t copy/paste nicely, so here is a for-loop you can use: &lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; mod in Core Gui Svg OpenGL Xml
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;do&lt;/span&gt; 
  sudo find /Applications/Autodesk/maya2011/Maya.app/Contents/Frameworks/Python.framework/Versions/Current/lib/python2.6/site-packages/PyQt4 -name &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;*so&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
  -exec install_name_tool -change libQt&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;mod&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;}&lt;/span&gt;.4.dylib @executable_path/Qt&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;mod&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{}&lt;/span&gt; ;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point you should be able to start up Maya and import and run PyQt from the script editor. You no longer need the pumpThread. Here is a test code snippet that I borrowed from here (the original had typos in it that I corrected)&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;maya.OpenMayaUI&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;mui&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;PyQt4.QtCore&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;PyQt4.QtGui&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;getMayaWindow&lt;/span&gt;():
    ptr &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; mui&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;MQtUtil&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;mainWindow()
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; sip&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;wrapinstance(&lt;span style=&#34;color: #007020&#34;&gt;long&lt;/span&gt;(ptr), QObject)

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;Form&lt;/span&gt;(QDialog):
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;__init__&lt;/span&gt;(&lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;, parent&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;None&lt;/span&gt;):
        &lt;span style=&#34;color: #007020&#34;&gt;super&lt;/span&gt;(Form, &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;__init__(parent)
        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;setWindowTitle(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;Test Dialog&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;setObjectName(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;mainUI&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;mainLayout &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; QVBoxLayout(&lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;)
        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;myButton &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; QPushButton(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;myButton&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;mainLayout&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;addWidget(&lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;myButton)

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;global&lt;/span&gt; app
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;global&lt;/span&gt; form
app &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; qApp
form &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Form(getMayaWindow())
form&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;show()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It doesn&amp;#8217;t seem like you even need the install of Qt 4.5.3 that we did at this point since we changed the links, unless you use another Qt module besides QtCore, QtGui, QtSvg, QtXml, QtOpenGL (such as QtNetwork), but this could be solved by copying over the missing libs to where Maya is expecting them. Example for copying over QtNetwork:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;sudo cp /usr/local/Trolltech/Qt-4.5.3/lib/libQtNetwork.* 
    /Applications/Autodesk/maya2011/Maya.app/Contents/MacOS
sudo install_name_tool -change libQtCore.4.dylib @executable_path/QtCore 
    /Applications/Autodesk/maya2011/Maya.app/Contents/MacOS/libQtNetwork.4.dylib
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you happen to have a mixed library environment like me, with more than one python lib location for code, and you see any funny errors while importing a module, just make sure that mayas python site-package is always in the front of the sys.path:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;sys&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;insert(&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;/Applications/Autodesk/maya2011/Maya.app/Contents/Frameworks/Python.framework/Versions/Current/lib/python2.6/site-packages&amp;#39;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And there you have it. PyQt4 now installed in Maya 2011 under OSX.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://images.autodesk.com/adsk/files/pyqtmaya2011.pdf&#34;&gt;http://images.autodesk.com/adsk/files/pyqtmaya2011.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups.google.com/group/python_inside_maya/browse_thread/thread/cd7109604407cba2/618a61ccebf8ac10?lnk=raot&amp;amp;pli=1&#34;&gt;groups.google.com/group/python_inside_maya&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://community.softimage.com/forum/autodesk-maya/python/pyqt-and-maya-pyqt-window-parented-to-maya-window/&#34;&gt;http://community.softimage.com/forum/autodesk-maya/python/pyqt-and-maya-pyqt-window-parented-to-maya-window/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    
    
    <item>
      <title>AtomSplitter source code released</title>
      <link>http://justinfx.com/2010/10/08/atomsplitter-source-code-released/</link>
      <pubDate>2006-01-02 15:04:05 &#43;0000 MST</pubDate>
      
      <guid>http://justinfx.com/2010/10/08/atomsplitter-source-code-released/</guid>
      <description>&lt;p&gt;We finally decided to release the source code for AtomSplitter, since we were getting some feedback that the application builds weren&amp;#8217;t 100% working on every possible system.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;update-1&#34;&gt;Update #1:&lt;/h3&gt;

&lt;p&gt;I have posted the AtomSplitter project on github now: &lt;a href=&#34;https://github.com/justinfx/AtomSplitter&#34;&gt;https://github.com/justinfx/AtomSplitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Project site:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/justinfx/AtomSplitter&#34;&gt;http://redmine.justinfx.com/projects/atomsplitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The current version is 1.6.2,  which adds the cmivfx chatroom to a tab, and some minor bug fixes. More info:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cmivfx.com/productpages/product.aspx?name=AtomSplitter_1.6&#34;&gt;http://www.cmivfx.com/productpages/product.aspx?name=AtomSplitter_1.6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>AtomSplitter v1.6 update</title>
      <link>http://justinfx.com/2010/08/31/208/</link>
      <pubDate>2006-01-02 15:04:05 &#43;0000 MST</pubDate>
      
      <guid>http://justinfx.com/2010/08/31/208/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://justinfx.com/wp-content/uploads/2009/12/chan2fbx.jpg&#34;&gt;&lt;/p&gt;

&lt;p&gt;AtomSplitter has been updated to v1.6, available through cmivfx.com&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cmivfx.com/productpages/product.aspx?name=AtomSplitter_1.6&#34;&gt;AtomSplitter 1.6 &amp;#8211; cmiVFX.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Updates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Exports Terragen .tgd scene file format
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://justinfx.com/2009/12/06/chantofbx-tool-released-through-cmivfx&#34;&gt;See the original post.&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;COMMAND LINE HELP

OSX:
AtomSplitter.app/Contents/MacOS/AtomSplitter &amp;lt;chan file&amp;gt; [out file]

Linux:
AtomSplitter &amp;lt;chan file&amp;gt; [out file]

Windows:
AtomSplitter.exe &amp;lt;chan file&amp;gt; [out file]

=========================================

HELP:
$ AtomSplitter -h

Usage: AtomSplitter &amp;lt;chan file&amp;gt; [out file]

Options:
-h, --help
        show this help message and exit
-o OBJ, --obj=OBJ
        Optional nuke-exported pointCloud .obj file
-f FPS, --fps=FPS
        Set FPS rate (default 24)
-x WIDTH, --width=WIDTH
        Set frame width (default 2048)
-y HEIGHT, --height=HEIGHT
        Set frame height (default 1556)
--filmwidth=FILMWIDTH
        Set film aperature width in mm (default 24.576)
--filmheight=FILMHEIGHT
        Set film aperature height in mm (default 18.672)
-s SCALE, --scale=SCALE
        Scale the translation values by this amount
-F FORMAT, --format=FORMAT
        Output format (fbx, action, terragen)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    
    
    <item>
      <title>Maya, and self-intersecting nurbsCurves</title>
      <link>http://justinfx.com/2010/08/09/maya-and-self-intersecting-nurbscurves/</link>
      <pubDate>2006-01-02 15:04:05 &#43;0000 MST</pubDate>
      
      <guid>http://justinfx.com/2010/08/09/maya-and-self-intersecting-nurbscurves/</guid>
      <description>

&lt;p&gt;This is a story about my journey in solving a problem at work involving curves. The solution seemed really simple at first, but because of a stupid Maya issue, this turned into me having to rewrite the tool 3 times before I discovered a surprising solution.&lt;/p&gt;

&lt;h4 id=&#34;the-problem&#34;&gt;The Problem:&lt;/h4&gt;

&lt;p&gt;Because we rely heavily on the process of importing Illustrator .ai files into Maya as nurbsCurves, we constantly have to deal with curves that intersect themselves. This is a result of the curves having been hand drawn originally in the art department, and they posed issues during rendering after being planar-ized.&lt;/p&gt;

&lt;p&gt;We needed a way to detect self-intersecting nurbsCurves, so that we could fix them before working with them as nurbsSurfaces.&lt;/p&gt;

&lt;div id=&#34;attachment_169&#34; style=&#34;width: 310px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;a href=&#34;http://justinfx.com/wp-content/uploads/2010/08/curvesExample.png&#34; rel=&#34;lightbox[163]&#34;&gt;&lt;img class=&#34;size-medium wp-image-169  &#34; style=&#34;background-color: white;&#34; title=&#34;nurbsCurve Example&#34; src=&#34;http://justinfx.com/wp-content/uploads/2010/08/curvesExample-300x213.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;213&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Loop Curves (self-intersection)
  &lt;/p&gt;
&lt;/div&gt;

&lt;h4 id=&#34;getting-started-i-hate-you-maya&#34;&gt;Getting started. I hate you, Maya:&lt;/h4&gt;

&lt;p&gt;The obvious place for me to start was to use the existing &lt;em&gt;curveIntersect&lt;/em&gt; command. This command will tell you if two curves intersect, and at what points. Although it requires that you tell it 2 individual curves to test, I figured I could just split the single curve into parts (using detach curve), and pair off all the parts to test them. And here is where I ran into something that just pissed me off. While it works great to tell you where the intersection is&amp;#8230; when it DOESN&amp;#8217;T find an intersection, it prints a &amp;#8220;Warning: Could not find curve-curve intersection&amp;#8221; line. Printing to the script editor in maya is SUPER expensive as I have found. Everything slows down. This was the initial reason I decided not to use this method. I later found out the RIGHT hack way to deal with this is to wrap the entire process in scriptEditorInfo commands to suppress warnings being printed to the Script Editor and re-enable after. This method does prevent the amazing slowness, but still has the unacceptable flood of warnings once suppression is turned back off again. So even with this fix, I still found this approach to be too slow. For a single complex curve object that might have, say, 500 spans&amp;#8230; that would be 124750 unique combinations that would have to be tested with the &lt;em&gt;curveIntersect&lt;/em&gt; command. In a test of just looping that many times and calling this command, the process took 54 seconds! No way could this work, with a scene that could easily have 2000+ nurbsCurves!&lt;/p&gt;

&lt;p&gt;Great. Now I get to investigate my own intersection detection from scratch.&lt;/p&gt;

&lt;h4 id=&#34;span-style-font-weight-normal-strong-approach-2-8211-brute-force-strong-span&#34;&gt;&lt;span style=&#34;font-weight: normal;&#34;&gt;&lt;strong&gt;Approach #2 &amp;#8211; Brute Force&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;I&amp;#8217;m a film school graduate&amp;#8230; not a computer science major. Never thought I would have to use the kind of math I TRIED to implement for a first solution. Solving the cubic function of every curve segment to find the intersections? Meh. Too hard.&lt;/p&gt;

&lt;p&gt;Next I thought of an idea to take a curve and sample N-amount of points from start to end parameter. So lets say 1000 samples. I would get 1000 points on the curve, then compare each point to the other non-neighboring points to see if they are within a distance tolerance of each other. If they are, I consider this a point in the curve where it looped and self-intersected. This method did work. It was still not super fast, but no where NEAR as slow as using the intersect command. I built in some dynamic scaling of the sampling and tolerance to accommodate for curves of different size and complexity.  Even though I had to test 499500 point combinations per nurbsCurve for the 1000 point samples, this was only math and not a repeat call to &lt;em&gt;curveIntersect&lt;/em&gt;. Ultimately, I was still not where I needed to be in terms of usability. A complex curve could still be a few seconds to test. Still too slow.&lt;/p&gt;

&lt;h4 id=&#34;approach-2-5-8211-brute-force-mixed-with-a-fast-little-pre-check&#34;&gt;&lt;strong&gt;Approach #2.5 &amp;#8211; Brute Force mixed with a fast little pre-check&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Amongst the tons of search results I waded through on google, I found a really cool little trick someone came up with: &lt;a href=&#34;http://forums.cgsociety.org/archive/index.php/t-517347.html&#34;&gt;http://forums.cgsociety.org/archive/index.php/t-517347.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;He suggested a cool hack where you planar the surface, then convert it to polygon with certain options, and then count the number of resulting faces that were produced. Theoretically there should only be 1 face if the curve never intersected itself. If it did, those loops should also have faces.&lt;/p&gt;

&lt;p&gt;Well then, why couldn&amp;#8217;t I just use this method as my detection algorithm? While it was pretty darn fast since no iteration is involved, I discovered a few limited cases where I was getting False Negatives: The method said there was only one face (no intersection) on a curve that actually did have a self intersection. So I decided to use this as a pre-check to save time. If it DID say there was self-intersection, great! Log it. Otherwise, slow test it with the brute force method.&lt;/p&gt;

&lt;h4 id=&#34;approach-3-8211-math-that-i-never-learned&#34;&gt;Approach #3 &amp;#8211; Math that I never learned&lt;/h4&gt;

&lt;p&gt;At this point I had accepted the solution for detecting self-intersection, and moved on to writing a maya UI for the tool. It would detect loops and optionally even report back the best estimate to the point where it actually occurred. But once I started writing another bigger tool that would use this script, I just knew it could be done faster with the power of math and without the poop of maya script command calls.&lt;/p&gt;

&lt;div id=&#34;attachment_170&#34; style=&#34;width: 310px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;a href=&#34;http://www.tsplines.com/technology/edu/CurveIntersection.pdf&#34;&gt;&lt;img class=&#34;size-medium wp-image-170&#34; title=&#34;Bezier Clipping&#34; src=&#34;http://justinfx.com/wp-content/uploads/2010/08/clipping-300x141.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;141&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Bezier Clipping Method
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;I discovered a paper written about a method called &amp;#8220;Bezier Clipping&amp;#8221; : &lt;a href=&#34;http://www.tsplines.com/technology/edu/CurveIntersection.pdf&#34;&gt;Curve intersection using Bezier Clipping&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this method to be used on a single curve, one would first need to split the curve into its segments, in my case producing a bunch of cubic curves. With each pair of combinations, a bounding box check would be performed. If the bounding boxes do not overlap, you are done. No intersection would have occurred. If the bounding boxes did overlap, then you would start drilling down the check by clipping away sections of the curves outside the bounding box overlap. You can discover the intersection pretty fast by either drilling down until the segments are small enough to represent the single point, or the segments are now small enough to be considered linear and a you can use the slopes to find the intersection.&lt;/p&gt;

&lt;p&gt;I was really stoked by this idea. The paper made it look really straight forward. I ended up writing a really cool custom wrapper around a nurbsCurve object that could represent a sub-section of the curve, and could easily give me things like the length and parameter range. It had a &lt;em&gt;split()&lt;/em&gt; method that could split the curve at a given length or parameter and give me back two sub-curves, of which each could further be split. This class was integrated into the Bezier Clipping method and I finally got it all working. The initial tests were amazingly fast, but I ended up finding that the process became quite slow on large numbers of complex curves. I attribute this to my implementation of the bezier clipping, not the method itself. I didn&amp;#8217;t take the time to actually generate proper sub-segments based on the bounding box overlap, and instead just did a simple &lt;sup&gt;50&lt;/sup&gt;&amp;frasl;&lt;sub&gt;50&lt;/sub&gt; split of each curve, and tested the new combinations. I think I was just so bummed about the performance results that I didn&amp;#8217;t feel like making the improvements to the process would make enough of a difference. What I had now was ultimately slower than my brute force method when tested against an entire scene of curves. So I decided to just go back to that.&lt;/p&gt;

&lt;h4 id=&#34;approach-4-8211-the-unexpected-trick&#34;&gt;Approach #4 &amp;#8211; The unexpected trick&lt;/h4&gt;

&lt;p&gt;Whilst working on the larger project meant to make use of the loop detection script, I discovered something amongst the curve commands. &lt;em&gt;offsetCurve&lt;/em&gt; includes the function of clipping away loops while creating the new offset curve object. My idea was to create an offsetCurve with the minimal changes, at a zero distance, so the curves would be right on top of each other. Then I could just compare the area/length/etc attributes of the curves to see if there was a change. This was really fast and really accurate, down to the smallest loops. Right now I&amp;#8217;m comparing the area and length values rounded to a certain tolerance. This method was amazingly fast, and a fraction of the code.&lt;/p&gt;

&lt;p&gt;The only minor downside was I found that because of the rounding I needed to do to compare the values, every so often a couple curves would be found as self-intersecting when they were not. Thats much better than MISSING curves during the detection. So what I did was combine the earlier face-counting solution with this one, to fail over between the two. The combination was really fast and accurate, without 100,000 warnings showing up in the stupid script editor.&lt;/p&gt;

&lt;h4 id=&#34;all-in-all&#34;&gt;All in all&lt;/h4&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: normal;&#34;&gt;I&amp;#8217;m really surprised how many versions of this tool I had to write, to ultimately end up at a really simple one. I never would have thought to look at this &lt;em&gt;offsetCurve&lt;/em&gt; command for a solution. Had to dig into some math I never thought I would use, also. So THATS what those stupid polynomial equations were for?&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: normal;&#34;&gt;&lt;br /&gt; &lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Film Jam Podcast Interview</title>
      <link>http://justinfx.com/2010/08/04/film-jam-podcast-interview/</link>
      <pubDate>2006-01-02 15:04:05 &#43;0000 MST</pubDate>
      
      <guid>http://justinfx.com/2010/08/04/film-jam-podcast-interview/</guid>
      <description>

&lt;p&gt;I recently did an interview with my friends on their show, Film Jam. Its a podcast dealing with the film industry from the perspective of 3 guys working their way up the ladder. Fantastic show up &amp;#8217;till this point. Hopefully I don&amp;#8217;t break the cycle &lt;img src=&#34;http://justinfx.com/wp-includes/images/smilies/simple-smile.png&#34; alt=&#34;:-)&#34; class=&#34;wp-smiley&#34; style=&#34;height: 1em; max-height: 1em;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Please make sure to leave a review about the show via iTunes!&lt;/p&gt;

&lt;h3 id=&#34;episode-20&#34;&gt;Episode #20&lt;/h3&gt;

&lt;p&gt;&lt;span style=&#34;color: #00ccff;&#34;&gt;Playlist page&lt;/span&gt;&lt;span style=&#34;color: #00ccff;&#34;&gt;&lt;br /&gt; &lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>AtomSplitter v1.5 update</title>
      <link>http://justinfx.com/2010/05/26/atomsplitter-v1-5-update/</link>
      <pubDate>2006-01-02 15:04:05 &#43;0000 MST</pubDate>
      
      <guid>http://justinfx.com/2010/05/26/atomsplitter-v1-5-update/</guid>
      <description>&lt;p&gt;AtomSplitter has been updated to v1.5, available through cmivfx.com&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cmivfx.com/productpages/product.aspx?name=AtomSplitter_1.5&#34;&gt;AtomSplitter 1.5 &amp;#8211; cmiVFX.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Updates:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;ul&gt;
    &lt;li&gt;
      Added the ability to convert point cloud data, exported from Nuke as a .obj, to be included in the fbx/action export.
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://justinfx.com/2009/12/06/chantofbx-tool-released-through-cmivfx/&#34;&gt;See the original post.&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>AtomSplitter v1.2 update</title>
      <link>http://justinfx.com/2010/05/11/atomsplitter-v1-2-update/</link>
      <pubDate>2006-01-02 15:04:05 &#43;0000 MST</pubDate>
      
      <guid>http://justinfx.com/2010/05/11/atomsplitter-v1-2-update/</guid>
      <description>&lt;p&gt;AtomSplitter (chanToFbx) has been updated to v1.2, available through cmivfx.com&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cmivfx.com/productpages/product.aspx?name=AtomSplitter_1.2&#34;&gt;&lt;span style=&#34;color: #00ccff;&#34;&gt;AtomSplitter 1.2 &amp;#8211; cmiVFX.com&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Updates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Camera rotation order set to ZXY, which is the Nuke camera default&lt;/li&gt;
&lt;li&gt;Fixed a bug where the FocalLength value was not being keyframed properly&lt;/li&gt;
&lt;li&gt;Added a scene scale field, for adjusting the translation values globally.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you haven&amp;#8217;t visited &lt;a href=&#34;http://cmiVFX.com&#34; target=&#34;_blank&#34;&gt;cmiVFX.com&lt;/a&gt; before, PLEASE check them out. Chris Maynard does an amazing job rounding up top talent in the industry to create these outstanding visual fx tutorials. The information is always cutting edge.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://justinfx.com/2009/12/06/chantofbx-tool-released-through-cmivfx/&#34;&gt;&lt;span style=&#34;color: #993366;&#34;&gt;See the original post.&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>chanToFbx tool released through cmiVFX</title>
      <link>http://justinfx.com/2009/12/06/chantofbx-tool-released-through-cmivfx/</link>
      <pubDate>2006-01-02 15:04:05 &#43;0000 MST</pubDate>
      
      <guid>http://justinfx.com/2009/12/06/chantofbx-tool-released-through-cmivfx/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-39&#34; title=&#34;chan2fbx&#34; src=&#34;http://justinfx.com/wp-content/uploads/2009/12/chan2fbx.jpg&#34; alt=&#34;chan2fbx&#34; width=&#34;201&#34; height=&#34;104&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I had received a mailing list email from cmiVFX, where Chris Maynard was challenging the community to write a tool that could convert a nuke camera .chan file to a functional FBX format. This was apparently meant to compliment the new 3d camera tracker in NukeX. So I decided to take on the challenge.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The tool started out as a command-line python script that would translate the chan files simple column-style output to fbx. But in testing specifically with Flame, Chris found that the fbx simply would not import all the channels properly. Thus, I was asked to integrate a solution by Georges Nakhle for converting the chan to an .action format, which is native to Flame. So with George&amp;#8217;s .action code, Chris&amp;#8217;s testing with the scaling in Flame, and the rest of my code, we seemed to have all the bases covered in getting the .chan file into a universal format.&lt;/p&gt;

&lt;p&gt;Chris asked if I would wrap the tool into a GUI, to allow easier access to the few options the script provides. Using the cmiVFX.com website as a reference, I threw together a nice looking GUI in PyQt. It was fun because I got to really play around with CSS and skinning in PyQt, which is something I never really had to do before. I learned how much of a pain in the ass Palettes are, and how freaking simple the CSS route makes it to control the look or widgets.&lt;/p&gt;

&lt;p&gt;Chris released it today: &lt;del&gt;&lt;a title=&#34;http://www.fxmogul.com/&#34; href=&#34;http://www.fxmogul.com/&#34; target=&#34;_blank&#34; class=&#34;broken_link&#34;&gt;&lt;a href=&#34;http://www.fxmogul.com/&#34;&gt;http://www.fxmogul.com/&lt;/a&gt;&lt;/a&gt;&lt;/del&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update: This is no longer hosted through cmivfx, and has been posted on github, labeled &amp;#8220;AtomSplitter&amp;#8221;: &lt;a href=&#34;https://github.com/justinfx/AtomSplitter&#34;&gt;https://github.com/justinfx/AtomSplitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently there is a version for both OSX and Windows. I have been having some issues packaging the code under Linux, but I just need to really sit down and figure it out. The build is kinda larger than I hoped, but thats what I get for distributing PyQt &lt;img src=&#34;http://justinfx.com/wp-includes/images/smilies/simple-smile.png&#34; alt=&#34;:-)&#34; class=&#34;wp-smiley&#34; style=&#34;height: 1em; max-height: 1em;&#34; /&gt;&lt;/p&gt;

&lt;div id=&#34;attachment_41&#34; style=&#34;width: 590px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;img class=&#34;size-full wp-image-41&#34; title=&#34;chan2FBX_screen&#34; src=&#34;http://justinfx.com/wp-content/uploads/2009/12/chan2FBX_screen.jpg&#34; alt=&#34;.chan To FBX GUI (osx)&#34; width=&#34;580&#34; height=&#34;428&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    .chan To FBX GUI (osx)
  &lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    
  </channel>
</rss>